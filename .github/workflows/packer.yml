# This is a basic workflow to help you get started with Actions

name: Packer for GCP

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "packer-build"
  packer-build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      MACHINE_TYPE: ${{vars.MACHINE_TYPE}}
      TAGS: ${{vars.TAGS}}
      BOOT_DISK_SIZE: ${{vars.BOOT_DISK_SIZE}} 
      BOOT_DISK_TYPE: ${{vars.BOOT_DISK_TYPE}} 
      NETWORK: ${{vars.NETWORK}} 
      SUBNET: ${{vars.SUBNET}}
      NETWORK_TIER: ${{vars.NETWORK_TIER}} 
      SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }} 
      SCOPES: ${{vars.SCOPES}}
      DB_USER: ${{ secrets.SQL_DB_USER }}
      DB_PASSWORD: ${{ secrets.SQL_DB_PASSWORD }}
      DB_HOST: ${{ secrets.SQL_DB_HOST }} 
      DB_NAME: ${{ secrets.SQL_DB_NAME }}
      REGION: ${{vars.REGION}}
      GROUP_NAME: ${{ vars.GROUP_NAME }}
      DB_INSTANCE_CONNECTION: ${{secrets.DB_INSTANCE_CONNECTION_NAME}}
      PROJECT : ${{secrets.PROJECT_ID}}
      KEYRING : ${{vars.KEYRING_NAME}}
      VM_KEY : ${{vars.VM_KEY}}
      PUBSUB_TOPIC: ${{vars.PUBSUB_TOPIC}}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
            credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Use gcloud CLI
        run: gcloud info

      - name: Generate application artifact
        run: zip -r webapp.zip ./

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "1.10.1"

      - name: Run `packer init`
        id: init
        run: packer init packer/.
      
      - name: Run `packer fmt`
        id: fmt
        run: packer fmt packer/.

      - name: Run `packer validate`
        id: validate
        run: packer validate -var-file='./packer/dev.pkrvars.hcl' packer/.

      - name: Run 'packer build'
        id: build
        run: packer build -var-file='./packer/dev.pkrvars.hcl' packer/.

      - name: Fetch the Image Name
        run: |
          MY_MI=$(jq -r '.builds[0].artifact_id' /tmp/image_manifest.json)
          echo "MY_MI=$MY_MI" >> $GITHUB_ENV

      - name: Generating Template Name with Current Timestamp
        id: generate-timestamp
        run: echo "TEMPLATE_NAME=csye6225-vm-$(date +%Y-%m-%d-%H-%M-%S)" >> $GITHUB_ENV

      - name: Creating instance template
        run: |
          gcloud compute instance-templates create $TEMPLATE_NAME \
          --machine-type=${{ env.MACHINE_TYPE }} \
          --tags=${{ env.TAGS }} \
          --image=${{ env.MY_MI }} \
          --region=${{ env.REGION }} \
          --instance-template-region=${{ env.REGION }} \
          --boot-disk-size=${{ env.BOOT_DISK_SIZE }} \
          --boot-disk-type=${{ env.BOOT_DISK_TYPE }} \
          --network-interface="network=${{ env.NETWORK }},subnet=${{ env.SUBNET }},network-tier=${{ env.NETWORK_TIER }}" \
          --service-account=${{ env.SERVICE_ACCOUNT }} \
          --scopes=${{ env.SCOPES }} \
          --metadata=startup-script="#!/bin/bash\ntouch /tmp/webapp/webapp.env\necho 'DB_HOST=${{env.DB_HOST}}' >> /tmp/webapp/webapp.env\necho 'DB_PORT=3306' >> /tmp/webapp/webapp.env\necho 'DB_NAME=${{env.DB_NAME}}' >> /tmp/webapp/webapp.env\necho 'DB_USER=${{env.DB_USER}}' >> /tmp/webapp/webapp.env\necho 'DB_PASSWORD=${{env.DB_PASSWORD}}' >> /tmp/webapp/webapp.env\necho 'PROJECT_ID=${{env.PROJECT}}' >> /tmp/webapp/webapp.env\necho 'SQL_INSTANCE=${{env.DB_INSTANCE_CONNECTION}}' >> /tmp/webapp/webapp.env\necho 'PUBSUB_TOPIC=${{env.PUBSUB_TOPIC}}' >> /tmp/webapp/webapp.env\nsudo chown -R csye6225:csye6225 /tmp/webapp/webapp.env\nsudo chmod 644 /tmp/webapp/webapp.env\n\ntouch /tmp/success-indicator-file\nsudo systemctl restart csye6225.service\n"

      - name: configure instance group
        run: |
          gcloud compute instance-groups managed set-instance-template \
            ${{ env.GROUP_NAME }} \
            --template=projects/${{ env.PROJECT }}/regions/${{ env.REGION }}/instanceTemplates/${{ env.TEMPLATE_NAME }} \
            --region=${{ env.REGION }}
      
      - name: Start rolling update
        run: |
          gcloud compute instance-groups managed rolling-action start-update ${{ env.GROUP_NAME }} \
          --version=template=projects/${{ env.PROJECT }}/regions/${{ env.REGION }}/instanceTemplates/${{ env.TEMPLATE_NAME }} \
          --region=${{ env.REGION }} \
          --type=proactive

      - name: Check rolling update status
        run: |
          gcloud compute instance-groups managed wait-until ${{ env.GROUP_NAME }} \
          --version-target-reached \
          --region=${{env.REGION}}
